
###############################################################################
#                        Reference Sample Section
#
# The Reference Sample Section handles the configuration related with the
# objects used to find neighbors from. Two different types of reference samples
# can be used. The first is a directory build using the NNPZ tools, containing
# the reference sample in the NNPZ format (parameter reference_sample_dir_. The
# second is a reference catalog, containing photometry values for the same bands
# as the target catalog (ref_cat option). Note that only one of the two options
# can be used.
#
###############################################################################

#
# Reference Sample directory options:
#
# - reference_sample_dir
#       The directory containing the reference sample files
# - reference_sample_index
#       The name of the index reference sample index file
# - reference_sample_sed_pattern
#       Pattern for the files containing the SEDs
# - reference_sample_pdz_pattern
#       Pattern for the files containing the PDZs
# - reference_sample_phot_file
#       The file containing the photometry of the reference sample, as produced
#       by the NnpzBuildPhotometry tool
# - reference_sample_phot_filters
#       The filters of the reference sample photometry to be used. They must
#       have the same order with the ones defined by the target_filters option
# - reference_sample_out_mean_phot_filters
#       A list of filters from the reference sample photometry file to compute
#       the weighted mean photometry for
#

#reference_sample_dir = '/disk2/OU-PHZ/NNPZ/ref_sample_20180410'
#reference_sample_providers = 'providers.json'
reference_sample_phot_file = '/disk2/OU-PHZ/NNPZ/ref_sample_20180410/F_nu_uJy.fits'
reference_sample_phot_filters = ['u', 'g', 'r', 'i', 'z', 'vis', 'Y', 'J', 'H']
reference_sample_out_mean_phot_filters = reference_sample_phot_filters

#
# Reference catalog options:
#
# - reference_catalog
#       An ASCII or FITS photometry catalog to be used as the the reference
#       sample
# - reference_catalog_filters
#       The columns of the reference catalog containing the photometry values.
#       They must have the same order with the ones defined by the
#       target_catalog_filters option
# - reference_catalog_redshift
#       The column containing the redshift of the reference catalog objects to
#       be used for all the NNPZ computations
# - reference_catalog_redshift_bins_hdu
#       When the redshift column is a probability distribution function, this HDU must contain
#       its binning.
# - reference_catalog_redshift_bins_col
#       Column name of the redshift bin HDU where the probability value of the bin is
# - reference_catalog_out_mean_phot_filters
#       A list of filters from the reference sample photometry file to compute
#       the weighted mean photometry for
#

reference_catalog = '/disk2/OU-PHZ/DC3/jean/DC3.2.0/cats/euclid_emulated_DC3.2.0_COSMOS15_training_vis_detected.fits'
reference_catalog_filters = [
    ('u_obs', 'u_obs_err'),
    ('g_obs', 'g_obs_err'),
    ('r_obs', 'r_obs_err'),
    ('i_obs', 'i_obs_err'),
    ('z_obs', 'z_obs_err'),
    ('vis_obs', 'vis_obs_err'),
    ('Y_obs', 'Y_obs_err'),
    ('J_obs', 'J_obs_err'),
    ('H_obs', 'H_obs_err')
]
reference_catalog_redshift = 'z_true'
# reference_catalog_redshift_bins_hdu = 'PDZ_BINS'
reference_catalog_out_mean_phot_filters = reference_catalog_filters

###############################################################################
#                       Target Catalog Section
#
# The Target Catalog Section handles the configuration related with the catalog
# to compute the photometric redshift for.
#
# Target catalog options:
#
# - target_catalog
#       The input photometric catalog, in FITS or ASCII format
# - target_catalog_filters
#       The columns of the target catalog containing the photometry values. They
#       must have the same order defined by the reference_catalog_filters option
# - target_catalog_gal_ebv
#       The column of the target catalog containing the galactic E(B-V)
# - target_catalog_filters_mean
#       A dictionary where the key is the band name, and the value is the column on the
#       target catalog containing the average wavelength of the part of the filter that
#       influenced the measure.
# - missing_photometry_flags
#       A list containing all the values indicating missing data. Note that NaN
#       is implicitly translated to missing data.
# - input_size
#       Defines the number of rows of the input catalog to process
#
###############################################################################

target_catalog = '/disk2/OU-PHZ/DC3/jean/DC3.2.0/cats/euclid_emulated_DC3.2.0_COSMOS15_test_vis_detected.fits'
target_catalog_filters = [
    ('u_obs', 'u_obs_err'),
    ('g_obs', 'g_obs_err'),
    ('r_obs', 'r_obs_err'),
    ('i_obs', 'i_obs_err'),
    ('z_obs', 'z_obs_err'),
    ('vis_obs', 'vis_obs_err'),
    ('Y_obs', 'Y_obs_err'),
    ('J_obs', 'J_obs_err'),
    ('H_obs', 'H_obs_err')
]
#target_catalog_id_column = 'ID'
#target_catalog_gal_ebv = 'GAL_EBV'
#target_catalog_filters_mean = {
#    'vis': 'AVG_TRANS_WAVE_VIS',
#    'Y': 'AVG_TRANS_WAVE_Y',
#    'J': 'AVG_TRANS_WAVE_J',
#    'H': 'AVG_TRANS_WAVE_H'
#}
missing_photometry_flags = [-99]
input_size = 1000

###############################################################################
#                     NNPZ Algorithm Options Section
#
# This section contains the options related with the NNPZ algorithm configuration.
#
# Neighbors selection options:
#
# - neighbor_method
#       The method to be used for selecting the neighbors. It can be one of:
#       - KDTree: Fastest method, finding the neighbors using Euclidean distance.
#           WARNING: All errors are ignored when this method is used.
#       - BruteForce: Finds the neighbors using chi2 distance, by computing the
#           chi2 of all objects in the reference sample. WARNING: This method
#           is much slower than the alternatives.
#       - Combined: This method first finds a batch of neighbors in Euclidean
#           distance using a KDTree and then it finds the closest neighbors inside
#           the batch, by using chi2 distance.
# - neighbors_no
#       The number of neighbors to be used
# - neighbor_adaptive_bands
#       If the target catalog has columns with all the values missing, Combined will always fall back to BruteForce,
#       ignoring the missing fluxes, as the KDTree method does not work in those cases.
#       If this parameter is set to True, columns with all NaN values will be directly ignored, so the KDTree
#       is built using only those for which there are at least one value present.
#       This should improve the performance without affecting the results
# - scale_prior
#       If BruteForce is enabled, scale_prior can be used to allow the scaling of the reference
#       fluxes. It can be either the string 'uniform' (equivalent to angular distance), a Python callable
#       that receives the scale value and returns its prior probability, or the path to a file containing
#       the prior curve
# - scale_max_iter
#       Maximum number of iterations to perform for the minimization of the posterior of the scale factor
# - scale_rtol
#       Tolerance (relative) for termination.
# - batch_size
#       The size of the batch size when the 'Combined' method is used, or
#       'BruteForce' with scaling enabled
#
# Weight calculation options:
#
# - weight_method
#       The method to be used for computing the weights of the neighbors. It can
#       be one of:
#       - Euclidean: The inversed Euclidean distance (errors are ignored)
#       - Chi2: The inversed chi2
#       - Likelihood: The likelihood computed as exp(-chi2 / 2)
# - weight_method_alternative
#       If weight_method yields a value of 0 for *all* neighbors of a given object,
#       this method will be used instead to recompute alternative weights.
#       It supports the same values as weight_method
# - balanced_kdtree
#       By default, the KDTree will be built using the median, creating a more compact
#       tree. It takes longer, but queries are faster.
#       In rare cases, depending on the data distribution (i.e a lot of zeros),
#       the algorithm may perform very poorly. In those cases, this could be disabled.
# - absolute_weight
#       Relative weights calculated by 'weight_method' can be corrected by an
#       absolute weight assigned to each entry on the reference catalog/sample:
#       'relative_weight * absolute_weight'
#       This option can be either a column within the photometry table/reference
#       catalog, or a string 'file:column' when the weight is stored separately.
#       Note that in the case of a separate file, the ID column must exist, and
#       match exactly (and in the same order) the IDs coming from the reference.
#
#
###############################################################################

neighbor_method = 'Combined'
# scale_prior = 'uniform'
# scale_max_iter = 20
# scale_rtol = 1e-4
batch_size = 2000
neighbors_no = 30
neighbor_adaptive_bands = False
weight_method = 'Likelihood'
weight_method_alternative = 'Chi2'
# absolute_weights = 'weight'
balanced_kdtree = True

###############################################################################
#                      Output Section
#
# The Output Section handles the configuration related with the produced output.
#
# Available options:
#
# - output_file
#       The file to store the output catalog
# - copy_input_columns
#       If True, the target catalog columns are copied to the output
#       If False, at least 'target_catalog_id_column' is copied to the output
# - neighbor_info_output
#       Add to the output catalog the reference sample neighbor IDs and weights
# - pdz_output
#       If False, the output catalog will skip the PDZ columns. They can later be
#       computed using NnpzConstructPDZ. Note that this flag being False only makes sense if
#       neighbor_info_output is True, otherwise all information is lost.
# - pdz_quantiles
#       A list with the PDZ quantiles to be added to the output
# - pdz_mc_samples
#       The number of Monte Carlo samples to get from the PDZ for each source
# - flags_in_separate_columns
#       When True, the catalog will contain a column for each flag. When False,
#       the flags wil be compressed by 8 per column.
# - pdz_point_estimates
#       A list of point estimates to add to the output. Supported: median, mean
#       and mode.
# - redden_mean_phot
#       If true, output mean photometry will be redenned back to the target color space.
#       Requires a reference sample and target_catalog_gal_ebv to be set
#
###############################################################################

output_file = '/disk2/OU-PHZ/DC3/nnpz/out.fits'
copy_input_columns = True
neighbor_info_output = True
pdz_output = True
pdz_quantiles = [0.25, 0.5, 0.75]
pdz_mc_samples = 1
flags_in_separate_columns = False
pdz_point_estimates = ['median']
# redden_mean_phot = True

###############################################################################
log_level = 'INFO'
