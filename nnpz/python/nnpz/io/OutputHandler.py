#
# Copyright (C) 2012-2022 Euclid Science Ground Segment
#
# This library is free software; you can redistribute it and/or modify it under the terms of
# the GNU Lesser General Public License as published by the Free Software Foundation;
# either version 3.0 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along with this library;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA
#

"""
Created on: 01/02/18
Author: Nikolaos Apostolakos
"""

import abc
from typing import Any, Dict, List, Optional, Tuple, Union

import astropy.units as u
import fitsio.hdu
import numpy as np


class OutputHandler:
    """
    Handles the generation of the output properties from the found reference objects
    and the given configuration
    """

    class OutputColumnProviderInterface(abc.ABC):
        """
        This interface must be implemented by output properties that generate a column
        """

        @abc.abstractmethod
        def get_column_definition(self) \
            -> List[Tuple[str, np.dtype, u.Unit, Optional[Tuple[int, ...]]]]:
            """
            Returns:
                List of triplets (name, dtype, shape) that define the output that the
                provider generates. The shape can be skipped.
            Notes:
                The implementation must *not* account for the catalog size on the shape.
            """
            raise NotImplementedError(self)

        @abc.abstractmethod
        def generate_output(self, indexes: np.ndarray, neighbor_info: np.ndarray,
                            output: np.ndarray):
            raise NotImplementedError(self)

    class OutputExtensionProviderInterface(abc.ABC):
        """
        This interface must be implemented by output properties that generate an additional
        table
        """

        @abc.abstractmethod
        def add_extensions(self, fits: fitsio.FITS):
            """
            fits:
                The file where to add the additional extensions
            """
            pass

    class HeaderProviderInterface(abc.ABC):
        """
        This interface must be implemented by output properties that generate a table header
        """

        @abc.abstractmethod
        def get_headers(self) -> Dict[str, Any]:
            """
            Returns:
                 A map with keys the keyword names and values the header values.
            """
            pass

    def __init__(self, path: str):
        self.__header_providers: List[OutputHandler.HeaderProviderInterface] = []
        self.__column_providers: List[OutputHandler.OutputColumnProviderInterface] = []
        self.__hdu_providers: List[OutputHandler.OutputExtensionProviderInterface] = []
        self.__output_fits: fitsio.FITS = fitsio.FITS(path, mode='rw', clobber=True)
        self.__hdu: Optional[fitsio.hdu.TableHDU] = None
        self.__dtype: Optional[np.dtype] = None

    def add_column_provider(self, provider: OutputColumnProviderInterface):
        """
        Register a new column provider
        Args:
            provider:  OutputColumnProviderInterface
        """
        self.__column_providers.append(provider)

    def add_extension_table_provider(self, provider: OutputExtensionProviderInterface):
        """
        Register a new table provider
        Args:
            provider: OutputExtensionTableProviderInterface
        """
        self.__hdu_providers.append(provider)

    def add_header_provider(self, provider: HeaderProviderInterface):
        """
        Register a new header provider
        Args:
            provider: HeaderProviderInterface
        """
        self.__header_providers.append(provider)

    def __generate_headers(self) -> Dict[str, Any]:
        """
        Set up the headers on the table HDU
        """
        headers = {'comment': 'Generated by NNPZ'}
        for header_provider in self.__header_providers:
            headers.update(header_provider.get_headers())
        return headers

    def initialize(self):
        """
        Setup output area
        """
        # Build specs
        spec = []
        units = []
        for col_provider in self.__column_providers:
            col_defs = col_provider.get_column_definition()
            for col_def in col_defs:
                if len(col_def) == 4:
                    name, dtype, unit, shape = col_def
                    spec.append((name, dtype, shape))
                else:
                    name, dtype, unit = col_def
                    spec.append((name, dtype))
                units.append(unit)
        self.__dtype = np.dtype(spec)
        headers = self.__generate_headers()
        self.__output_fits.create_table_hdu(dtype=self.__dtype, units=[str(u) for u in units],
                                            header=headers)
        self.__hdu = self.__output_fits[-1]
        self.__hdu.write_keys(headers)

    def write_output_for(self, indexes: Union[np.ndarray, slice], neighbor_info: np.ndarray):
        """
        Write the output for the given input
        """
        if self.__hdu is None:
            self.initialize()
        if isinstance(indexes, slice):
            indexes = np.arange(indexes.start, indexes.stop, step=indexes.step)
        output = np.zeros(len(neighbor_info), dtype=self.__dtype)
        for col_provider in self.__column_providers:
            col_provider.generate_output(indexes, neighbor_info, output)
        self.__hdu.append(output)

    def write_additional_hduls(self):
        self.__hdu = None
        for hdu_provider in self.__hdu_providers:
            hdu_provider.add_extensions(self.__output_fits)
        self.__output_fits.reopen()
